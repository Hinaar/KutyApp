<?xml version="1.0" encoding="UTF-8"?>
<ContentView xmlns="http://xamarin.com/schemas/2014/forms" 
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="KutyApp.Client.Xam.Views.PetDetailView"
             xmlns:validator="clr-namespace:KutyApp.Client.Xam.Behaviors.Validation"
             xmlns:local="clr-namespace:KutyApp.Client.Xam"
             xmlns:myControls="clr-namespace:KutyApp.Client.Xam.Controls"
             BackgroundColor="{StaticResource PageBackgroundColor}">
  <ContentView.Content>
        <StackLayout>
            <Grid BackgroundColor="Black" x:Name="FullImageLayout" IsVisible="False" HeightRequest="1000" Opacity="0">
                <myControls:ZoomImage  Source="{Binding PetBigImageSource}" Aspect="AspectFit">
                    <myControls:ZoomImage.GestureRecognizers>
                        <TapGestureRecognizer NumberOfTapsRequired="2" Tapped="HideFullImage" />
                    </myControls:ZoomImage.GestureRecognizers>
                </myControls:ZoomImage>
            </Grid>
            
            <Grid x:Name="BasicLayout" IsVisible="True">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Grid VerticalOptions="FillAndExpand" Grid.Row="0" HorizontalOptions="Fill">
                    <Frame CornerRadius="5" BorderColor="White" HasShadow="True" BackgroundColor="Transparent" Padding="0" Margin="5" IsClippedToBounds="True">
                        <Image Aspect="AspectFill" Source="{Binding PetImageSource}" x:Name="kepem">
                            <Image.GestureRecognizers>
                                <TapGestureRecognizer NumberOfTapsRequired="2" Tapped="OpenImageSelection"/> 
                                <PinchGestureRecognizer PinchUpdated="ShowFullImage" />
                            </Image.GestureRecognizers>
                        </Image>
                    </Frame>
                </Grid>
                <ScrollView Grid.Row="1">
                    <StackLayout>
                        <StackLayout Orientation="Horizontal" x:Name="PictureButtonsLayout" IsVisible="False" HorizontalOptions="CenterAndExpand">
                            <Button IsEnabled="{Binding IsOnline}" Text="{x:Static local:Resources.Localization.Texts.TakePhotoButtonText}" Command="{Binding TakePhotoCommand}" CornerRadius="5" BackgroundColor="{StaticResource MainButtonBackgroundColor}" TextColor="White"/>
                            <Button IsEnabled="{Binding IsOnline}" Text="{x:Static local:Resources.Localization.Texts.PickPohotoButtonText}" Command="{Binding PickPhotoCommand}" CornerRadius="5" BackgroundColor="{StaticResource MainButtonBackgroundColor}" TextColor="White"/>
                        </StackLayout>
                        <!-- Name -->
                        <myControls:ExtraEntry Text="{Binding Name, Mode=TwoWay}" BackgroundColor="Transparent" MyBackgroundColor="{StaticResource ExtraEntryBackgroundColor}" TextColor="White" FontAttributes="Bold" CornerRadius="10" BorderColor="White" BorderThickness="2" Margin="5">
                            <Entry.Behaviors>
                                <validator:ValidatorBaseBehavior x:Name="NameValidator" IsRequired="True"/>
                            </Entry.Behaviors>
                            <Entry.Triggers>
                                <DataTrigger Binding="{Binding Source={x:Reference NameValidator}, Path=IsValid}"
                                 TargetType="myControls:ExtraEntry"
                                 Value="False">
                                    <Setter Property="MyBackgroundColor" Value="{StaticResource ErrorBackgroundColor}" />
                                    <Setter Property="BorderColor" Value="Red" />
                                    <Setter Property="BorderThickness" Value="5" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Source={x:Reference NameValidator}, Path=IsValid}"
                                 TargetType="myControls:ExtraEntry"
                                 Value="True">
                                    <Setter Property="MyBackgroundColor" Value="{StaticResource ExtraEntryBackgroundColor}" />
                                    <Setter Property="BorderColor" Value="White" />
                                    <Setter Property="BorderThickness" Value="2" />
                                </DataTrigger>
                            </Entry.Triggers>
                        </myControls:ExtraEntry>
                        <Label Margin="5, -5" Text="{x:Static local:Resources.Localization.Texts.NameRequired}" TextColor="Red" FontSize="Micro" IsVisible="{Binding Source={x:Reference NameValidator}, Path=IsValid, Converter={StaticResource InvertBooleanConverter}}" />
                        <!--Chipnumber-->
                        <myControls:ExtraEntry Text="{Binding ChipNumber, Mode=TwoWay}" BackgroundColor="Transparent" MyBackgroundColor="{StaticResource ExtraEntryBackgroundColor}" TextColor="White" FontAttributes="Bold" CornerRadius="10" BorderColor="White" BorderThickness="2" Margin="5">
                            <Entry.Behaviors>
                                <validator:ValidatorBaseBehavior x:Name="ChipnumberValidator" IsRequired="True"/>
                            </Entry.Behaviors>
                            <Entry.Triggers>
                                <DataTrigger Binding="{Binding Source={x:Reference ChipnumberValidator}, Path=IsValid}"
                                 TargetType="myControls:ExtraEntry"
                                 Value="False">
                                    <Setter Property="MyBackgroundColor" Value="{StaticResource ErrorBackgroundColor}" />
                                    <Setter Property="BorderColor" Value="Red" />
                                    <Setter Property="BorderThickness" Value="5" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Source={x:Reference ChipnumberValidator}, Path=IsValid}"
                                 TargetType="myControls:ExtraEntry"
                                 Value="True">
                                    <Setter Property="MyBackgroundColor" Value="{StaticResource ExtraEntryBackgroundColor}" />
                                    <Setter Property="BorderColor" Value="White" />
                                    <Setter Property="BorderThickness" Value="2" />
                                </DataTrigger>
                            </Entry.Triggers>
                        </myControls:ExtraEntry>
                        <Label Margin="5, -5" Text="{x:Static local:Resources.Localization.Texts.ChipNumberRequired}" TextColor="Red" FontSize="Micro" IsVisible="{Binding Source={x:Reference ChipnumberValidator}, Path=IsValid, Converter={StaticResource InvertBooleanConverter}}" />

                        <!--<Picker ItemsSource="{Binding GenderValues}" TextColor="White" SelectedItem="{Binding Gender, Mode=TwoWay}" Margin="5" BackgroundColor="{StaticResource ExtraEntryBackgroundColor}"/>-->
                        <myControls:ExtraPicker ItemsSource="{Binding GenderValues}"
                                            SelectedItem="{Binding Gender, Mode=TwoWay}"
                                            BackgroundColor="Transparent"
                                            MyBackgroundColor="{StaticResource ExtraEntryBackgroundColor}"
                                            TextColor="White" 
                                            FontAttributes="Bold"
                                            CornerRadius="10" 
                                            BorderColor="White" 
                                            BorderThickness="2"
                                            Margin="5"/>

                        <DatePicker Date="{Binding BirthDate, Mode=TwoWay}" />
                        <StackLayout Orientation="Horizontal" Padding="10, 0">
                            <Button Text="{x:Static local:Resources.Localization.Texts.SaveButtonText}" Command="{Binding AddOrEditPetCommand}" 
                                BackgroundColor="{StaticResource MainButtonBackgroundColor}" TextColor="White" CornerRadius="5"
                                HorizontalOptions="StartAndExpand"
                                IsEnabled="{Binding IsOnline}"/>
                            <Button Text="{x:Static local:Resources.Localization.Texts.DeleteButtonText}" Command="{Binding DeletePetCommand}" VerticalOptions="End"
                                BackgroundColor="{StaticResource ErrorBackgroundColor}" TextColor="White" CornerRadius="5" 
                                HorizontalOptions="EndAndExpand"
                                IsEnabled="{Binding IsOnline}"/>
                        </StackLayout>
                    </StackLayout>
                </ScrollView>
            </Grid>

        </StackLayout>
    </ContentView.Content>
</ContentView>